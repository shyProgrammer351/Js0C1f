var sP3a1 = "<font color='red'><b>include </b></font> &nbsp;헤더파일(.h) 내용을 소스코드(.c)에 포함하는 명령문<br><br><font color='red'><b>stdio.h </b></font> &nbsp;standard input output의 줄임말로 printf나 scanf 등 표준입출력 관련 함수 정보를 가지고 있는 헤더파일<br><br><font color='red'><b>unistd.h </b></font> &nbsp;sleep 함수를 포함하는 헤더 파일<br><br><font color='red'><b>main </b></font> &nbsp;프로그램을 시작할 때 운영체제가 호출하는 함수<br><br><font color='red'><b>printf </b></font> &nbsp;print formatted의 줄임말로 전달받은 내용을 형식에 맞게 모니터에 출력하는 함수<br><br><font color='red'><b>\\033 </b></font> &nbsp;출력 설정 이스케이프 문자 <br>printf( \"\\033[31m 빨강색(글자) \\033[0m\n\" ); // 출력결과: <font color='red'>빨강색(글자)</font> <br>printf( \"\\033[33m 노랑색(글자) \\033[0m\n\" ); // 출력결과: <font color='yellow'>노랑색(글자)</font> <br>printf( \"\\033[32m 초록색(글자) \\033[0m\n\" ); // 출력결과: <font color='green'>초록색(글자)</font> <br>printf( \"\\033[34m 파랑색(글자) \\033[0m\n\" ); // 출력결과: <font color='blue'>파랑색(글자)</font> <br>printf( \"\\033[41m 빨강색(바탕) \\033[0m\n\" ); // 출력결과: <span style='background-color:red;'>빨강색(바탕)</span> <br>printf( \"\\033[43m 노랑색(바탕) \\033[0m\n\" ); // 출력결과: <span style='background-color:yellow;'>노랑색(바탕)</span> <br>printf( \"\\033[42m 초록색(바탕) \\033[0m\n\" ); // 출력결과: <span style='background-color:green;'>초록색(바탕)</span> <br>printf( \"\\033[44m 파랑색(바탕) \\033[0m\n\" ); // 출력결과: <span style='background-color:blue;'>파랑색(바탕)</span> <br>printf( \"\\033[01m 글자 굵게    \\033[0m\n\" ); &nbsp; // 출력결과: <span style='font-weight:bold;'> 글자 굵게</span> <br>printf( \"\\033[1;5f모니터 화면의 1번째줄 5번째칸에 출력\" ); &nbsp; // 출력결과: 모니터 화면의 1번째줄 5번째칸에 출력<br>printf( \"\\033[6;3f모니터 화면의 6번째줄 3번째칸에 출력\" ); &nbsp; // 출력결과: 모니터 화면의 6번째줄 3번째칸에 출력<br> ※ \\033[0m는 글자색이나 배경색 초기화<br> ※ \\033[H\\033[J는 모니터 화면을 깨끗이 지우고 초기화<br><br><font color='red'><b>\\n </b></font> &nbsp;줄바꿈(new line) 문자<br><br><font color='red'><b>fflush </b></font> &nbsp;입출력 효율성을 고려하여, 일반적으로 입출력 요청이 있을때마다 처리하지 않고, 입출력 버퍼가 쌓일 때까지 기다렸다고 한꺼번에 처리하는데, fflush는 입출력 버퍼가 쌓일 때까지 기다리지 않고 강제로 처리<br><br><font color='red'><b>stdout </b></font> &nbsp;모니터 등의 표준 출력<br><br><font color='red'><b>sleep </b></font> &nbsp;지정한 시간만큼 대기하는 함수<br>리눅스/유닉스 버전 sleep(초)<pre style='width:790px; margin:0; padding:10px; border:1px solid #bcbcbc'>#include &lt;stdio.h&gt; <br>#include &lt;unistd.h&gt;<br>int main()<br>{<br>printf( \"3초 대기 시작\\n\");<br>sleep(3);<br>printf( \"3초 대기 종료\\n\");<br>return 0;<br>}</pre>윈도우 버전 Sleep(밀리초)<pre style='width:790px; margin:0; padding:10px; border:1px solid #bcbcbc'>#include &lt;stdio.h&gt; <br>#include &lt;Windows.h&gt;<br>int main()<br>{<br>printf( \"3초 대기 시작\\n\");<br>Sleep(3000);<br>printf( \"3초 대기 종료\\n\");<br>return 0;<br>}</pre><br><font color='red'><b>return </b></font> &nbsp;함수 종료시 실행흐름이 함수를 호출했던 곳으로 되돌아감 <br>예를 들어, main 함수가 끝나면 main 함수를 호출한 운영체제로 제어흐름이 돌아가고 프로그램이 종료<br><br>";
var sP3a2 =[[ "1",	"",	""],["2",	"",	""],["3",	"              &@ \n",	""],["4",	"             (@@@. \n",	""],["5",	"            #@@@@@ \n",	""],["6",	"           /@@@@@@@ \n",	""],["7",	"  @@@@@@@@@@@@@@@@@@@@@@@@@@@ \n",	""],["8",	"    /@@@@@@@@@@@@@@@@@@@@@. \n",	""],["9",	"       @@@@@@@@@@@@@@@@ \n",	""],["10",	"        #@@@@@@@@@@@@@ \n",	""],["11",	"        @@@@@@@@@@@@@@@ \n",	""],["12",	"       @@@@@@@   @@@@@@ \n",	""],["13",	"       @@@           @@@ \n",	""],["14",	"       @               @ \n",	""],["15",	"반",	""],["16",	"",	""],["17",	"",	""],["18",	"짝 ",	""],["19",	"",	""],["20",	"",	""],["21",	"반",	""],["22",	"",	""],["23",	"",	""],["24",	"짝 ",	""],["25",	"",	""],["26",	"",	""],["27",	"작",	""],["28",	"",	""],["29",	"",	""],["30",	"은 ",	""],["31",	"",	""],["32",	"",	""],["33",	"별 ",	""],["34",	"",	""],["35",	"",	""],["36",	"아",	""],["37",	"",	""],["38",	"",	""],["39",	"름",	""],["40",	"",	""],["41",	"",	""],["42",	"답",	""],["43",	"",	""],["44",	"",	""],["45",	"게 ",	""],["46",	"",	""],["47",	"",	""],["48",	"비",	""],["49",	"",	""],["50",	"",	""],["51",	"치",	""],["52",	"",	""],["53",	"",	""],["54",	"네",	""],["55",	"",	""],["56",	"",	"" ],];
